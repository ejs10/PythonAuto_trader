Index: .idea/inspectionProfiles/profiles_settings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/inspectionProfiles/profiles_settings.xml b/.idea/inspectionProfiles/profiles_settings.xml
new file mode 100644
--- /dev/null	(revision e715831df37b631c9bcae7ee00192a290989d2f1)
+++ b/.idea/inspectionProfiles/profiles_settings.xml	(revision e715831df37b631c9bcae7ee00192a290989d2f1)
@@ -0,0 +1,6 @@
+<component name="InspectionProjectProfileManager">
+  <settings>
+    <option name="USE_PROJECT_PROFILE" value="false" />
+    <version value="1.0" />
+  </settings>
+</component>
\ No newline at end of file
Index: .idea/inspectionProfiles/Project_Default.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/inspectionProfiles/Project_Default.xml b/.idea/inspectionProfiles/Project_Default.xml
new file mode 100644
--- /dev/null	(revision e715831df37b631c9bcae7ee00192a290989d2f1)
+++ b/.idea/inspectionProfiles/Project_Default.xml	(revision e715831df37b631c9bcae7ee00192a290989d2f1)
@@ -0,0 +1,19 @@
+<component name="InspectionProjectProfileManager">
+  <profile version="1.0">
+    <option name="myName" value="Project Default" />
+    <inspection_tool class="CyclomaticComplexityInspection" enabled="true" level="WARNING" enabled_by_default="true" />
+    <inspection_tool class="PyPackageRequirementsInspection" enabled="true" level="WARNING" enabled_by_default="true">
+      <option name="ignoredPackages">
+        <value>
+          <list size="4">
+            <item index="0" class="java.lang.String" itemvalue="pandas" />
+            <item index="1" class="java.lang.String" itemvalue="ccxt" />
+            <item index="2" class="java.lang.String" itemvalue="aiohttp" />
+            <item index="3" class="java.lang.String" itemvalue="ta-lib" />
+          </list>
+        </value>
+      </option>
+    </inspection_tool>
+    <inspection_tool class="RestRoleInspection" enabled="true" level="WARNING" enabled_by_default="true" />
+  </profile>
+</component>
\ No newline at end of file
Index: .idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
new file mode 100644
--- /dev/null	(revision e715831df37b631c9bcae7ee00192a290989d2f1)
+++ b/.idea/.gitignore	(revision e715831df37b631c9bcae7ee00192a290989d2f1)
@@ -0,0 +1,3 @@
+# Default ignored files
+/shelf/
+/workspace.xml
Index: .idea/material_theme_project_new.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/material_theme_project_new.xml b/.idea/material_theme_project_new.xml
new file mode 100644
--- /dev/null	(revision e715831df37b631c9bcae7ee00192a290989d2f1)
+++ b/.idea/material_theme_project_new.xml	(revision e715831df37b631c9bcae7ee00192a290989d2f1)
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="MaterialThemeProjectNewConfig">
+    <option name="metadata">
+      <MTProjectMetadataState>
+        <option name="migrated" value="true" />
+        <option name="pristineConfig" value="false" />
+        <option name="userId" value="28b67569:1957b830bc4:-7ffe" />
+      </MTProjectMetadataState>
+    </option>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
--- /dev/null	(revision e715831df37b631c9bcae7ee00192a290989d2f1)
+++ b/.idea/misc.xml	(revision e715831df37b631c9bcae7ee00192a290989d2f1)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Black">
+    <option name="sdkName" value="Python 3.12 (PythonAuto_trader)" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
--- /dev/null	(revision e715831df37b631c9bcae7ee00192a290989d2f1)
+++ b/.idea/modules.xml	(revision e715831df37b631c9bcae7ee00192a290989d2f1)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/.idea/PythonAuto_trader.iml" filepath="$PROJECT_DIR$/.idea/PythonAuto_trader.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/PythonAuto_trader.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/PythonAuto_trader.iml b/.idea/PythonAuto_trader.iml
new file mode 100644
--- /dev/null	(revision e715831df37b631c9bcae7ee00192a290989d2f1)
+++ b/.idea/PythonAuto_trader.iml	(revision e715831df37b631c9bcae7ee00192a290989d2f1)
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="PYTHON_MODULE" version="4">
+  <component name="NewModuleRootManager">
+    <content url="file://$MODULE_DIR$">
+      <excludeFolder url="file://$MODULE_DIR$/.venv" />
+    </content>
+    <orderEntry type="jdk" jdkName="Python 3.12 (PythonAuto_trader)" jdkType="Python SDK" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
--- /dev/null	(revision e715831df37b631c9bcae7ee00192a290989d2f1)
+++ b/.idea/vcs.xml	(revision e715831df37b631c9bcae7ee00192a290989d2f1)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: app/web/routes/backtest_route.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/web/routes/backtest_route.py b/app/web/routes/backtest_route.py
new file mode 100644
--- /dev/null	(revision e715831df37b631c9bcae7ee00192a290989d2f1)
+++ b/app/web/routes/backtest_route.py	(revision e715831df37b631c9bcae7ee00192a290989d2f1)
@@ -0,0 +1,37 @@
+# auto_trader/app/routes/backtest_route.py
+
+from flask import Blueprint, request, jsonify, render_template
+from data.data_loader import get_price_data
+from strategy.strategy_ma import moving_average_strategy
+from strategy.strategy_rsi import rsi_strategy
+from backtest.backtester import run_backtest
+
+backtest_bp = Blueprint('backtest', __name__)
+
+@backtest_bp.route('/')
+def index():
+    return render_template("index.html")
+
+@backtest_bp.route('/run_backtest', methods=["POST"])
+def run_backtest_api():
+    data = request.json
+    ticker = data.get("ticker")
+    period = data.get("period")
+    strategy = data.get("strategy")
+    params = data.get("params", {})
+
+    df = get_price_data(ticker, period)
+
+    if strategy == "ma":
+        short = int(params.get("short", 5))
+        long = int(params.get("long", 20))
+        def strategy_fn(df): return moving_average_strategy(df, short, long)
+    elif strategy == "rsi":
+        low = int(params.get("low", 30))
+        high = int(params.get("high", 70))
+        def strategy_fn(df): return rsi_strategy(df, low, high)
+    else:
+        return jsonify({"error": "Unknown strategy"}), 400
+
+    result = run_backtest(df, strategy_fn, ticker)
+    return jsonify(result)
Index: app/web/static/main.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/web/static/main.js b/app/web/static/main.js
new file mode 100644
--- /dev/null	(revision e715831df37b631c9bcae7ee00192a290989d2f1)
+++ b/app/web/static/main.js	(revision e715831df37b631c9bcae7ee00192a290989d2f1)
@@ -0,0 +1,86 @@
+// auto_trader/app/static/main.js
+
+async function runBacktest() {
+  const ticker = document.getElementById("ticker").value;
+  const period = document.getElementById("period").value;
+  const strategy = document.getElementById("strategy").value;
+
+  const payload = {
+    ticker: ticker,
+    period: period,
+    strategy: strategy,
+    params: {} // 필요시 사용자 인풋 추가 가능
+  };
+
+  const res = await fetch("/backtest", {
+    method: "POST",
+    headers: { "Content-Type": "application/json" },
+    body: JSON.stringify(payload)
+  });
+
+  const data = await res.json();
+
+  if (data.error) {
+    document.getElementById("resultText").innerText = "❌ 오류: " + data.error;
+    return;
+  }
+
+  // 📋 텍스트 결과
+  document.getElementById("resultText").innerText = `
+총 수익: $${data.total_profit.toFixed(2)}
+보유 현금: $${data.cash.toFixed(2)}
+현재 포지션: ${data.position}
+`;
+
+  // 📊 차트 생성
+  const dates = data.price_data.map(p => p.date);
+  const prices = data.price_data.map(p => p.Close);
+
+  const signalMap = {};
+  data.signals.forEach(sig => {
+    signalMap[sig.date] = sig.signal;
+  });
+
+  const signalColors = dates.map(date => {
+    if (signalMap[date] === "BUY") return "green";
+    if (signalMap[date] === "SELL") return "red";
+    return "gray";
+  });
+
+  const ctx = document.getElementById("priceChart").getContext("2d");
+  if (window.priceChart) window.priceChart.destroy();
+
+  window.priceChart = new Chart(ctx, {
+    type: "line",
+    data: {
+      labels: dates,
+      datasets: [{
+        label: "종가",
+        data: prices,
+        borderColor: "blue",
+        pointBackgroundColor: signalColors,
+        pointRadius: 4,
+        fill: false
+      }]
+    },
+    options: {
+      responsive: true,
+      plugins: {
+        legend: { display: true },
+        tooltip: {
+          callbacks: {
+            label: function(context) {
+              const date = context.label;
+              const signal = signalMap[date];
+              return `가격: ${context.formattedValue} (${signal || 'HOLD'})`;
+            }
+          }
+        }
+      },
+      scales: {
+        x: { display: true },
+        y: { display: true }
+      }
+    }
+  });
+}
\ No newline at end of file
Index: app/web/templates/index.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/web/templates/index.html b/app/web/templates/index.html
new file mode 100644
--- /dev/null	(revision e715831df37b631c9bcae7ee00192a290989d2f1)
+++ b/app/web/templates/index.html	(revision e715831df37b631c9bcae7ee00192a290989d2f1)
@@ -0,0 +1,183 @@
+<!-- auto_trader/app/templates/index.html -->
+<!DOCTYPE html>
+<html lang="en">
+<head>
+  <meta charset="UTF-8" />
+  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
+  <title>📊 주식 백테스트 대시보드</title>
+  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
+</head>
+<body>
+  <h2>📈 전략 백테스트</h2>
+
+  <label>종목 (예: AAPL):</label>
+  <input type="text" id="ticker" value="AAPL"><br>
+
+  <label>기간 (예: 6mo):</label>
+  <input type="text" id="period" value="6mo"><br>
+
+  <label>전략:</label>
+  <select id="strategy">
+    <option value="ma">이동평균 (MA)</option>
+    <option value="rsi">RSI</option>
+  </select><br><br>
+
+  <button onclick="runBacktest()">🚀 백테스트 실행</button>
+
+  <h3>💰 결과</h3>
+  <pre id="resultText"></pre>
+
+  <h3>📉 가격 + 시그널</h3>
+  <canvas id="priceChart" width="800" height="400"></canvas>
+
+  <script src="{{ url_for('static', filename='main.js') }}"></script>
+</body>
+</html>
+
+<!--
+<!DOCTYPE html>
+<html lang="ko">
+<head>
+  <meta charset="UTF-8">
+  <meta name="viewport" content="width=device-width, initial-scale=1.0">
+  <title>주식 자동매맸 전략 UI</title>
+  <style>
+    body {
+      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
+      background: #f4f6f8;
+      margin: 0;
+      padding: 0;
+    }
+    .container {
+      max-width: 600px;
+      margin: 50px auto;
+      background: #fff;
+      border-radius: 12px;
+      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
+      padding: 30px;
+    }
+    h2 {
+      text-align: center;
+      color: #333;
+    }
+    label {
+      display: block;
+      margin-top: 20px;
+      color: #555;
+    }
+    select, input[type=range], button {
+      width: 100%;
+      padding: 10px;
+      margin-top: 8px;
+      border: 1px solid #ccc;
+      border-radius: 8px;
+    }
+    button {
+      background-color: #007bff;
+      color: white;
+      border: none;
+      cursor: pointer;
+    }
+    button:hover {
+      background-color: #0056b3;
+    }
+  </style>
+</head>
+<body>
+  <div class="container">
+    <h2>주식 자동매맸 전략 UI</h2>
+
+    <label for="ticker">📌 종목 선택</label>
+    <select id="ticker">
+      <option value="AAPL">AAPL</option>
+      <option value="TSLA">TSLA</option>
+      <option value="GOOG">GOOG</option>
+      <option value="MSFT">MSFT</option>
+    </select>
+
+    <label for="period">⏳ 데이터 기간</label>
+    <select id="period">
+      <option value="3mo">3개월</option>
+      <option value="6mo">6개월</option>
+      <option value="1y">1년</option>
+    </select>
+
+    <label for="strategy">🧠 전략 선택</label>
+    <select id="strategy">
+      <option value="ma">이동평균 (MA)</option>
+      <option value="rsi">RSI</option>
+    </select>
+
+    <div id="ma-settings">
+      <label for="short-ma">단기 MA</label>
+      <input type="range" id="short-ma" min="5" max="20" value="10">
+
+      <label for="long-ma"> 장기 MA</label>
+      <input type="range" id="long-ma" min="25" max="60" value="40">
+    </div>
+
+    <div id="rsi-settings" style="display: none;">
+      <label for="rsi-period">RSI 기간</label>
+      <input type="range" id="rsi-period" min="5" max="30" value="14">
+
+      <label for="rsi-overbought">과매수 기준</label>
+      <input type="range" id="rsi-overbought" min="60" max="90" value="70">
+
+      <label for="rsi-oversold">과매도 기준</label>
+      <input type="range" id="rsi-oversold" min="10" max="40" value="30">
+    </div>
+
+    <button onclick="runBacktest()">🚀 백테스트 시작</button>
+  </div>
+
+  <script>
+    function runBacktest() {
+      const ticker = document.getElementById('ticker').value;
+      const period = document.getElementById('period').value;
+      const strategy = document.getElementById('strategy').value;
+
+      let params = {};
+
+      if (strategy === 'ma') {
+        params = {
+          short: document.getElementById('short-ma').value,
+          long: document.getElementById('long-ma').value
+        };
+      } else if (strategy === 'rsi') {
+        params = {
+          rsi_period: document.getElementById('rsi-period').value,
+          overbought: document.getElementById('rsi-overbought').value,
+          oversold: document.getElementById('rsi-oversold').value
+        };
+      }
+
+      fetch("http://localhost:5000/backtest", {
+        method: "POST",
+        headers: {
+          "Content-Type": "application/json"
+        },
+        body: JSON.stringify({
+          ticker: ticker,
+          period: period,
+          strategy: strategy,
+          params: params
+        })
+      })
+      .then(response => response.json())
+      .then(result => {
+        alert(
+          `✅ 백테스트 완료!\\n` +
+          `📌 총 수익률: ${parseFloat(result.total_profit).toFixed(2)} $\\n` +
+          `💰 보유 현금: ${result.cash} $\\n` +
+          `📦 보유 수량: ${result.position}`
+        );
+      })
+      .catch(error => {
+        console.error("백테스트 오류:", error);
+        alert("❌ 백테스트 실행 중 오류 발생. 콘솔을 확인하세요.");
+      });
+    }
+  </script>
+</body>
+</html>
+-->
Index: app/web/__init__.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/web/__init__.py b/app/web/__init__.py
new file mode 100644
--- /dev/null	(revision e715831df37b631c9bcae7ee00192a290989d2f1)
+++ b/app/web/__init__.py	(revision e715831df37b631c9bcae7ee00192a290989d2f1)
@@ -0,0 +1,16 @@
+#from .server import *
+# auto_trader/app/__init__.py
+
+from flask import Flask
+from flask_cors import CORS
+
+
+def create_app():
+    app = Flask(__name__)
+    CORS(app)
+
+    # 라우트 등록
+    from app.routes.backtest_route import backtest_bp
+    app.register_blueprint(backtest_bp)
+
+    return app
\ No newline at end of file
Index: app/web/server.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/web/server.py b/app/web/server.py
new file mode 100644
--- /dev/null	(revision e715831df37b631c9bcae7ee00192a290989d2f1)
+++ b/app/web/server.py	(revision e715831df37b631c9bcae7ee00192a290989d2f1)
@@ -0,0 +1,83 @@
+# server.py
+from datetime import date
+
+from flask import Flask, request, jsonify, render_template
+from flask_cors import CORS
+import pandas as pd
+from data.data_loader import get_price_data
+from strategy.strategy_ma import moving_average_strategy
+from strategy.strategy_rsi import rsi_strategy
+from trade.trader import PaperTrader
+from config.settings import Config
+
+
+app = Flask(__name__)
+CORS(app)  # 프론트엔드와 CORS 허용
+
+#index.html을 리턴
+def index():
+    return render_template("index.html")
+
+
+@app.route("/backtest", methods=["POST"])
+def backtest():
+    try:
+        data = request.json
+        ticker = data["ticker"]
+        period = data["period"]
+        strategy = data["strategy"]
+        params = data.get("params", {})
+
+        df = get_price_data(ticker, period=period)
+        trader = PaperTrader()
+
+        signals = []  # 📌 시그널 히스토리 저장
+        for i in range(30, len(df)):
+            sample = df.iloc[:i+1]
+
+            if strategy == "ma":
+                Config.MA_SHORT = int(params.get("short", 5))
+                Config.MA_LONG = int(params.get("long", 30))
+                signal = moving_average_strategy(sample)
+            elif strategy == "rsi":
+                signal = rsi_strategy(
+                    sample,
+                    period=int(params.get("rsi_period", 14)),
+                    overbought=int(params.get("overbought", 70)),
+                    oversold=int(params.get("oversold", 30))
+                )
+            else:
+                signal = "HOLD"
+
+            price = df["Close"].iloc[i]
+            data = df.index[i].strftime("%Y-%m-%d")
+
+            #트레이딩 수행
+            if signal == "BUY":
+                trader.buy(ticker, price, 1)
+            elif signal == "SELL":
+                trader.sell(ticker, price, 1)
+
+            #시그널 저장
+            signals.append({
+                "date": date,
+                "price": price,
+                "signal": signal
+
+            })
+
+        result = {
+            "total_profit": trader.total_profit,
+            "cash": trader.cash,
+            "position": trader.position,
+            "signals": signals,
+            "price_data": df["Close"].reset_index().rename(columns={"index": "date"}).to_dict(orient="records")
+        }
+        return jsonify(result)
+
+    except Exception as e:
+        return jsonify({"error": str(e)}), 500
+
+
+if __name__ == "__main__":
+    app.run(debug=True)
Index: app/dashboard.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/dashboard.py b/app/dashboard.py
new file mode 100644
--- /dev/null	(revision e715831df37b631c9bcae7ee00192a290989d2f1)
+++ b/app/dashboard.py	(revision e715831df37b631c9bcae7ee00192a290989d2f1)
@@ -0,0 +1,80 @@
+# streamlit_app.py
+
+import streamlit as st
+import pandas as pd
+from data.data_loader import get_price_data
+from backtest.optimizer import optimize_ma_strategy, plot_equity_curve
+from strategy.strategy_ma import moving_average_strategy
+from strategy.strategy_rsi import rsi_strategy
+from config.settings import Config
+from trade.trader import PaperTrader
+
+# --- 페이지 설정 ---
+st.set_page_config(page_title="📊 전략 백테스트 대시보드", layout="centered")
+st.title("📈 주식 자동매매 전략 대시보드")
+
+# --- 사이드바 설정 ---
+st.sidebar.header("⚙️ 설정")
+
+ticker = st.sidebar.selectbox("📌 종목 선택", ["AAPL", "TSLA", "GOOG", "MSFT"])
+period = st.sidebar.selectbox("⏳ 데이터 기간", ["3mo", "6mo", "1y"])
+
+strategy_type = st.sidebar.selectbox("🧠 전략 선택", ["이동평균 (MA)", "RSI"])
+
+# MA 전략 설정
+if strategy_type == "이동평균 (MA)":
+    short_range = st.sidebar.slider("단기 이동평균", 5, 20, 5)
+    long_range = st.sidebar.slider("장기 이동평균", 25, 60, 30)
+elif strategy_type == "RSI":
+    rsi_period = st.sidebar.slider("RSI 기간", 5, 30, 14)
+    rsi_overbought = st.sidebar.slider("과매수 기준", 60, 90, 70)
+    rsi_oversold = st.sidebar.slider("과매도 기준", 10, 40, 30)
+
+# 백테스트 실행
+if st.sidebar.button("🚀 백테스트 실행"):
+    df = get_price_data(ticker, period=period)
+    st.success(f"📥 데이터 로딩 완료: {ticker} ({period})")
+
+    trader = PaperTrader()
+    equity_curve = []
+
+    for i in range(30, len(df)):
+        sample = df.iloc[:i + 1]
+
+        #전략 시그널 계산
+        if strategy_type == "이동평균 (MA)":
+            # Config.MA_SHORT = short_range
+            # Config.MA_LONG = long_range
+            signal = moving_average_strategy(sample, short_range, long_range)
+        elif strategy_type == "RSI":
+            signal = rsi_strategy(sample, period=rsi_period, overbought=rsi_overbought, oversold=rsi_oversold)
+        else:
+            signal = "HOLD"
+
+        price = df["Close"].iloc[i]
+
+        if signal == "BUY":
+            trader.buy(ticker, price, 1)
+        elif signal == "SELL":
+            trader.sell(ticker, price, 1)
+
+        # 자산기록 (현금 + 주식)
+        total_value = trader.cash + trader.positions * price
+        equity_curve.append(total_value)
+
+    #결과시각화
+    trader.status()
+    st.subheader("📈 누적 수익률 그래프")
+    st.line_chart(equity_curve)
+
+    # 💰 수익률 정보
+    st.metric("총 수익", f"${trader.total_profit:.2f}")
+    st.caption(f"📌 최종 잔고: ${trader.cash:.2f} / 보유 수량: {trader.position}")
+
+    # Equity Curve Plot
+    if strategy_type == "이동평균 (MA)":
+        plot_equity_curve(df, short_range, long_range)
+    else:
+        st.warning("⚠️ RSI 전략은 아직 수익률 시각화 미지원 (옵션)")
+
+
Index: backtest/backtester.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backtest/backtester.py b/backtest/backtester.py
new file mode 100644
--- /dev/null	(revision e715831df37b631c9bcae7ee00192a290989d2f1)
+++ b/backtest/backtester.py	(revision e715831df37b631c9bcae7ee00192a290989d2f1)
@@ -0,0 +1,38 @@
+# backtest/backtester.py
+
+import pandas as pd
+from strategy.strategy_ma import moving_average_strategy
+from trade.trader import PaperTrader
+
+def run_backtest(df: pd.DataFrame, ticker: str, quantity: int = 1):
+    trader = PaperTrader()
+    buy_price = None
+    daily_returns = []
+
+    # 전체 데이터 순회하면서 전략 적용
+    for i in range(30, len(df)):  # 30일 이후부터 충분한 이동평균 확보
+        sample = df.iloc[:i+1]
+        signal = moving_average_strategy(sample)
+        current_price = df["Close"].iloc[i]
+
+        if signal == "BUY":
+            trader.buy(ticker, current_price, quantity)
+            buy_price = current_price
+        elif signal == "SELL":
+            trader.sell(ticker, current_price, quantity)
+            buy_price = None
+        # else: HOLD → 아무것도 안함
+
+        #누적 수익률 계산
+        daily_returns.append(trader.total_profit)
+
+    result = {
+        "total_profit": trader.total_profit,
+        "cash": trader.cash,
+        "position": trader.position,
+        "returns": daily_returns,  # 📈 Streamlit용 그래프 데이터
+    }
+    return result
+
+    # 최종 결과 출력
+    trader.status()
Index: backtest/optimizer.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backtest/optimizer.py b/backtest/optimizer.py
new file mode 100644
--- /dev/null	(revision e715831df37b631c9bcae7ee00192a290989d2f1)
+++ b/backtest/optimizer.py	(revision e715831df37b631c9bcae7ee00192a290989d2f1)
@@ -0,0 +1,77 @@
+# backtest/optimizer.py
+
+import pandas as pd
+import matplotlib.pyplot as plt
+from trade.trader import PaperTrader
+from strategy.strategy_ma import moving_average_strategy
+from config.settings import Config
+
+def simulate_strategy(df: pd.DataFrame, short: int, long: int) -> float:
+    Config.MA_SHORT = short
+    Config.MA_LONG = long
+    trader = PaperTrader()
+    buy_price = None
+
+    for i in range(long + 1, len(df)):
+        sample = df.iloc[:i+1]
+        signal = moving_average_strategy(sample)
+        price = df["Close"].iloc[i]
+
+        if signal == "BUY":
+            trader.buy("SIM", price, 1)
+            buy_price = price
+        elif signal == "SELL":
+            trader.sell("SIM", price, 1)
+
+    profit = trader.cash - trader._initial_cash
+    return profit
+
+
+def optimize_ma_strategy(df: pd.DataFrame, short_range=(5, 20), long_range=(25, 60)):
+    best_profit = float('-inf')
+    best_params = None
+
+    print("🔍 전략 최적화 중...")
+
+    for short in range(*short_range):
+        for long in range(*long_range):
+            if short >= long:
+                continue
+            profit = simulate_strategy(df.copy(), short, long)
+            print(f"✅ short={short}, long={long} → 수익: {profit:,.0f}원")
+            if profit > best_profit:
+                best_profit = profit
+                best_params = (short, long)
+
+    print(f"\n🏆 최적 전략: short={best_params[0]}, long={best_params[1]} → 수익: {best_profit:,.0f}원")
+    return best_params
+
+
+def plot_equity_curve(df: pd.DataFrame, short: int, long: int):
+    Config.MA_SHORT = short
+    Config.MA_LONG = long
+    trader = PaperTrader()
+    cash_history = []
+    current_cash = trader.cash
+
+    for i in range(long + 1, len(df)):
+        sample = df.iloc[:i+1]
+        signal = moving_average_strategy(sample)
+        price = df["Close"].iloc[i]
+
+        if signal == "BUY":
+            trader.buy("SIM", price, 1)
+        elif signal == "SELL":
+            trader.sell("SIM", price, 1)
+
+        cash_history.append(trader.cash)
+
+    plt.figure(figsize=(10, 5))
+    plt.plot(df.index[long + 1:], cash_history, label="Equity Curve", color='blue')
+    plt.title("📈 전략 누적 수익률 (Equity Curve)")
+    plt.xlabel("Date")
+    plt.ylabel("Portfolio Value")
+    plt.grid(True)
+    plt.legend()
+    plt.tight_layout()
+    plt.show()
Index: config/settings.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/config/settings.py b/config/settings.py
new file mode 100644
--- /dev/null	(revision e715831df37b631c9bcae7ee00192a290989d2f1)
+++ b/config/settings.py	(revision e715831df37b631c9bcae7ee00192a290989d2f1)
@@ -0,0 +1,24 @@
+import os
+from dotenv import load_dotenv
+
+# .env 파일 로딩
+
+class Config:
+    # 거래 API 설정
+    BROKER = os.getenv("BROKER", "ALPACA")  # 예: "KIWOOM", "ALPACA"
+    API_KEY = os.getenv("API_KEY", "")
+    API_SECRET = os.getenv("API_SECRET", "")
+    ACCOUNT_ID = os.getenv("ACCOUNT_ID", "")
+
+    # 거래 기본 설정
+    TICKER = "AAPL"  # 예시 종목 코드 (키움은 '005930'처럼 사용)
+    TRADE_QUANTITY = 10  # 한 번에 매수/매도할 수량
+    TRADE_MODE = "PAPER"  # "REAL" or "PAPER" (페이퍼 트레이딩용)
+
+    # 전략 설정
+    MA_SHORT = 5  # 단기 이동평균일수
+    MA_LONG = 20  # 장기 이동평균일수
+
+    # 알림 설정
+    TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "")
+    TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID", "")
\ No newline at end of file
Index: data/data_loader.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/data/data_loader.py b/data/data_loader.py
new file mode 100644
--- /dev/null	(revision e715831df37b631c9bcae7ee00192a290989d2f1)
+++ b/data/data_loader.py	(revision e715831df37b631c9bcae7ee00192a290989d2f1)
@@ -0,0 +1,21 @@
+import yfinance as yf
+import pandas as pd
+from datetime import datetime, timedelta
+
+
+def get_price_data(ticker: str, period: str = "3mo", interval: str = "1d") -> pd.DataFrame:
+    """
+    특정 종목의 과거 시세 데이터를 가져옵니다.
+
+    :param ticker: 티커 심볼 (예: 'AAPL', 'MSFT')
+    :param period: 조회 기간 (예: '1d', '5d', '1mo', '3mo', '1y')
+    :param interval: 데이터 간격 (예: '1m', '5m', '1d')
+    :return: 시세 데이터 (DataFrame)
+    """
+    try:
+        data = yf.download(ticker, period=period, interval=interval, progress=False)
+        data.dropna(inplace=True)
+        return data
+    except Exception as e:
+        print(f"[ERROR] 데이터 수집 실패: {e}")
+        return pd.DataFrame()
\ No newline at end of file
Index: strategy/strategy_ma.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/strategy/strategy_ma.py b/strategy/strategy_ma.py
new file mode 100644
--- /dev/null	(revision e715831df37b631c9bcae7ee00192a290989d2f1)
+++ b/strategy/strategy_ma.py	(revision e715831df37b631c9bcae7ee00192a290989d2f1)
@@ -0,0 +1,44 @@
+import pandas as pd
+from config.settings import Config
+
+def moving_average_strategy(df: pd.DataFrame) -> str :
+    """
+    이동평균선 전략 적용: 골든크로스 / 데드크로스 탐지
+
+    :param df: 시세 데이터 (DataFrame, yfinance 포맷)
+    :return: 'BUY', 'SELL', or 'HOLD'
+    """
+    short = Config.MA_SHORT
+    long = Config.MA_LONG
+
+    # 필수 컬럼 체크
+    if 'Close' not in df.columns:
+        print("❌ [오류] 'Close' 컬럼이 없습니다.")
+        return "HOLD"
+
+    # 충분한 데이터가 있는지 확인
+    if len(df) < long + 2:
+        print(f"⚠️ 데이터가 부족합니다. 최소 {long + 2}개 필요")
+        return "HOLD"
+
+    # 이동평균 계산 (복사본 사용하여 원본 보호)
+    df = df.copy()
+    df["MA_S"] = df["Close"].rolling(window=short).mean()
+    df["MA_L"] = df["Close"].rolling(window=long).mean()
+
+    # 최근 2일 데이터 가져오기
+    ma_s_prev, ma_l_prev = df["MA_S"].iloc[-2], df["MA_L"].iloc[-2]
+    ma_s_curr, ma_l_curr = df["MA_S"].iloc[-1], df["MA_L"].iloc[-1]
+
+    # 결측치 체크
+    if pd.isna(ma_s_prev) or pd.isna(ma_l_prev) or pd.isna(ma_s_curr) or pd.isna(ma_l_curr):
+        print("⚠️ 이동평균 계산 중 결측치 발생")
+        return "HOLD"
+
+    # 전략 조건 판단
+    if ma_s_prev < ma_l_prev and ma_s_curr > ma_l_curr:
+        return "BUY"
+    elif ma_s_prev > ma_l_prev and ma_s_curr < ma_l_curr:
+        return "SELL"
+    else:
+        return "HOLD"
\ No newline at end of file
Index: strategy/strategy_rsi.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/strategy/strategy_rsi.py b/strategy/strategy_rsi.py
new file mode 100644
--- /dev/null	(revision e715831df37b631c9bcae7ee00192a290989d2f1)
+++ b/strategy/strategy_rsi.py	(revision e715831df37b631c9bcae7ee00192a290989d2f1)
@@ -0,0 +1,42 @@
+# strategy/strategy_rsi.py
+
+import pandas as pd
+
+from data.data_loader import get_price_data
+#from strategy.strategy_rsi import rsi_strategy
+from trade.trader import PaperTrader
+
+
+def calculate_rsi(series: pd.Series, period: int = 14) -> pd.Series:
+    delta = series.diff()
+    gain = (delta.where(delta > 0, 0)).rolling(window=period).mean()
+    loss = (-delta.where(delta < 0, 0)).rolling(window=period).mean()
+    rs = gain / loss
+    rsi = 100 - (100 / (1 + rs))
+    return rsi
+
+
+def rsi_strategy(df: pd.DataFrame, period: int = 14, overbought: int = 70, oversold: int = 30) -> str:
+    rsi_series = calculate_rsi(df['Close'], period)
+    current_rsi = rsi_series.iloc[-1]
+
+    if current_rsi < oversold:
+        return "BUY"
+    elif current_rsi > overbought:
+        return "SELL"
+    else:
+        return "HOLD"
+
+
+def backtest_rsi(ticker="AAPL", period="6mo"):
+    df = get_price_data(ticker, period)
+    trader = PaperTrader()
+    for i in range(30, len(df)):
+        sample = df.iloc[:i+1]
+        signal = rsi_strategy(sample)
+        price = df['Close'].iloc[i]
+        if signal == "BUY":
+            trader.buy(ticker, price, 1)
+        elif signal == "SELL":
+            trader.sell(ticker, price, 1)
+    trader.status()
\ No newline at end of file
Index: trade/trader.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/trade/trader.py b/trade/trader.py
new file mode 100644
--- /dev/null	(revision e715831df37b631c9bcae7ee00192a290989d2f1)
+++ b/trade/trader.py	(revision e715831df37b631c9bcae7ee00192a290989d2f1)
@@ -0,0 +1,42 @@
+# trade/trader.py
+
+from config.settings import Config
+
+class PaperTrader:
+    def __init__(self, initial_cash: float = 10_000_000):
+        self.cash = initial_cash
+        self.positions = {}  # 종목: 수량
+        self.trade_log = []  # 매매 내역 기록
+
+    def buy(self, ticker: str, price: float, quantity: int):
+        total_cost = price * quantity
+
+        if self.cash >= total_cost:
+            self.cash -= total_cost
+            self.positions[ticker] = self.positions.get(ticker, 0) + quantity
+            self.trade_log.append((ticker, "BUY", price, quantity))
+            print(f"✅ 매수: {ticker} {quantity}주 @ {price:.2f} | 잔고: {self.cash:,.0f}원")
+        else:
+            print("❌ 매수 실패: 잔고 부족")
+
+    def sell(self, ticker: str, price: float, quantity: int):
+        holding_qty = self.positions.get(ticker, 0)
+
+        if holding_qty >= quantity:
+            self.positions[ticker] -= quantity
+            self.cash += price * quantity
+            self.trade_log.append((ticker, "SELL", price, quantity))
+            print(f"✅ 매도: {ticker} {quantity}주 @ {price:.2f} | 잔고: {self.cash:,.0f}원")
+        else:
+            print("❌ 매도 실패: 보유 수량 부족")
+
+    def status(self):
+        print("\n📊 현재 상태")
+        print(f"💰 잔고: {self.cash:,.0f}원")
+        print("📦 보유 종목:")
+        for ticker, qty in self.positions.items():
+            if qty > 0:
+                print(f"   - {ticker}: {qty}주")
+        print("📝 최근 거래:")
+        for log in self.trade_log[-5:]:
+            print(f"   {log[1]} {log[0]} {log[3]}주 @ {log[2]:.2f}")
Index: .gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.gitignore b/.gitignore
new file mode 100644
--- /dev/null	(revision e715831df37b631c9bcae7ee00192a290989d2f1)
+++ b/.gitignore	(revision e715831df37b631c9bcae7ee00192a290989d2f1)
@@ -0,0 +1,1 @@
+/.env
Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.py b/main.py
new file mode 100644
--- /dev/null	(revision e715831df37b631c9bcae7ee00192a290989d2f1)
+++ b/main.py	(revision e715831df37b631c9bcae7ee00192a290989d2f1)
@@ -0,0 +1,81 @@
+# main.py
+
+import os
+import sys
+import subprocess
+
+from data.data_loader import get_price_data
+from strategy.strategy_ma import moving_average_strategy
+from strategy.strategy_rsi import rsi_strategy
+from trade.trader import PaperTrader
+from config.settings import Config
+
+
+def run_backtest(df, strategy_fn, ticker="AAPL", quantity=1):
+    trader = PaperTrader()
+    for i in range(30, len(df)):
+        sample = df.iloc[:i + 1]
+        signal = strategy_fn(sample)
+        price = df["Close"].iloc[i]
+
+        if signal == "BUY":
+            trader.buy(ticker, price, quantity)
+        elif signal == "SELL":
+            trader.sell(ticker, price, quantity)
+
+    trader.status()
+
+def start_streamlit():
+    print("🌐 Streamlit 대시보드를 실행합니다...")
+    subprocess.run(["streamlit", "run", "app/dashboard.py"])
+
+
+def start_flask_server():
+    print("🌐 Flask 서버를 실행합니다...")
+    from app.web import server
+    server.app.run(host="0.0.0.0", port=5000, debug=True)
+
+def cli_backtest():
+    print("📈 자동매매 전략 백테스트 시스템")
+
+    ticker = input("종목을 입력하세요 (예: AAPL): ").upper()
+    period = input("기간을 입력하세요 (예: 6mo): ")
+
+    print("\n[전략 선택]")
+    print("1: 이동평균(MA)")
+    print("2: RSI")
+    strategy_choice = input("전략 번호 선택: ")
+
+    if strategy_choice == "1":
+        strategy_fn = moving_average_strategy
+        print("✅ 이동평균 전략 선택됨")
+    elif strategy_choice == "2":
+        strategy_fn = rsi_strategy
+        print("✅ RSI 전략 선택됨")
+    else:
+        print("❌ 잘못된 입력입니다.")
+        return
+
+    df = get_price_data(ticker, period=period)
+    run_backtest(df, strategy_fn, ticker)
+
+def main():
+    print("🔧 실행 모드를 선택하세요:")
+    print("1: CLI 백테스트")
+    print("2: Streamlit 웹 대시보드")
+    print("3: Flask API 서버")
+
+    mode = input("모드 번호 입력: ").strip()
+
+    if mode == "1":
+        cli_backtest()
+    elif mode == "2":
+        start_streamlit()
+    elif mode == "3":
+        start_flask_server()
+    else:
+        print("❌ 잘못된 모드 선택입니다.")
+
+
+if __name__ == "__main__":
+    main()
diff --git a/trade/broker_api.py b/trade/broker_api.py
new file mode 100644
